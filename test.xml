<!-- 
    This is an ant build file for Dynamator regression testing. 

    It is separate from build.xml so Dynamator can be built
    even when the dynamate ant task doesn't exist.

    Requirements:
    - Ant 1.5

    Classpath Requirements:
    - dynamator.jar
    - servlet.jar 
      (required by regression_java, which compiles generated code)

    $ANT_HOME/lib must contain:
    - jakarta-oro-2.0.8.jar
      (http://jakarta.apache.org/oro
    - antcontrib-0.5.jar
      (http://ant-contrib.sourceforge.net)
-->

<project name="dynamator" default="regression">
  
  <!-- user-defined configuration -->
  <property name="configuration.file" value="build.properties"/> 
  <property file="${user.home}/dynamator.build.properties" /> 
  <property file="${user.home}/build.properties" />
  <property file="${basedir}/${configuration.file}" />

  <!-- destination directories -->
  <property name="dir.build"    location="${basedir}/build"/>

  <!-- classpath -->

  <!-- allow classpath override (e.g. by jcoverage.xml) -->
  <property name="classpath.override" value=""/>

  <path id="classpath.project">
    <pathelement path="${classpath.override}"/>
    <pathelement location="${dir.build}/dynamator.jar"/>
    <pathelement location="${basedir}/dynamator.jar"/>
    <fileset dir="${basedir}">
      <include name="lib/**/*.jar"/>
    </fileset>
    <pathelement path="${java.class.path}"/>
  </path>

  <property name="classpath.project" refid="classpath.project"/>
  
  <target name="show-classpath">
    <fail>${classpath.project}</fail>
  </target>
  
  <taskdef name="dynamate" 
      classname="dynamator.ant.DynamateTask"
      classpathref="classpath.project"
    />

  <taskdef name="foreach"  
      classname="net.sf.antcontrib.logic.ForEach"/>
  <taskdef name="if"  
      classname="net.sf.antcontrib.logic.IfTask"/>
  <taskdef name="propertyregexp"
      classname="net.sf.antcontrib.property.RegexTask"/>

  <property name="trace" value="false"/>
  
  <property name="dir.test-output" location="${basedir}/test"/>

  <!--
      ============================================================
      Internally used targets
      ============================================================
  -->

  <!--
        Compare two files generated by Dynamator, 
        ignoring the Dynamator generation signature.
        Fails the build if the files don't match.

        property params:
        - diff.expected:             The location of the expected file
        - diff.actual:               The location of the actual file
        - diff.ignore-whitespace:    'true' to ignore whitespace
        - diff.uncommented           'true' to strip comments and 
                                        indents from the expected file
                                        before comparing
  -->
  <target name="diff">
    <loadfile property="expected" srcFile="${diff.expected}"/>
    <loadfile property="actual" srcFile="${diff.actual}"/>

    <propertyregexp property="expected" 
        input="${expected}"
        defaultValue="${expected}"
        global="true"
        override="true"
        regexp="(\r\n|\n\r|\r|\n)"
        replace="&#9999;"
        />

    <propertyregexp property="expected" 
        input="${expected}"
        defaultValue="${expected}"
        override="true"
        regexp="(&#9999;)?.{0,5}generated by Dynamator.*?&#9999;"
        replace="\1"
        />

    <propertyregexp property="actual" 
        input="${actual}"
        defaultValue="${actual}"
        global="true"
        override="true"
        regexp="(\r\n|\n\r)"
        replace="&#9999;"
        />
    
    <propertyregexp property="actual" 
        input="${actual}"
        defaultValue="${actual}"
        global="true"
        override="true"
        regexp="(\n|\r)"
        replace="&#9999;"
        />
    
    <propertyregexp property="actual" 
        input="${actual}"
        defaultValue="${actual}"
        override="true"
        regexp="(&#9999;)?.{0,5}generated by Dynamator.*?&#9999;"
        replace="\1"
        />

    <if>
      <istrue value="${diff.ignore-whitespace}"/>
      <then>
        <propertyregexp property="actual" 
            input="${actual}"
            defaultValue="${actual}"
            global="true"
            override="true"
            regexp="[ \t]+"
            replace=" "
            />
        <propertyregexp property="expected" 
            input="${expected}"
            defaultValue="${expected}"
            global="true"
            override="true"
            regexp="[ \t]+"
            replace=" "
            />
      </then>
    </if>

    <if>
      <istrue value="${diff.uncommented}"/>
      <then>
        <propertyregexp property="expected" 
            input="${expected}"
            defaultValue="${expected}"
            global="true"
            override="true"
            regexp="&#9999;[ \t]+"
            replace="&#9999;"
            />
        <!-- 
            FIXME:  The next one removes leading spaces from the
                    'actual' files, because raw content might have
                    indents. 

                    At the moment I don't remember whether having the
                    indents is supposed to test something, so I'm not
                    willing to remove the indents from the content.
                    
                    Maybe the content can be replaced with
                    RETAIN comments?
        -->
        <propertyregexp property="actual" 
            input="${actual}"
            defaultValue="${actual}"
            global="true"
            override="true"
            regexp="&#9999;[ \t]+"
            replace="&#9999;"
            />

        <!--
            Remove only those comments that begin and end 
            with a space or newline.  Other comments need
            to remain for the comparison to work.
        -->
        <propertyregexp property="expected" 
            defaultValue="${expected}"
            global="true"
            input="${expected}"
            override="true"
            regexp="(&#9999;)?&lt;!--[ &#9999;].*?[ &#9999;]--&gt;"
            replace=""
            />
        <!-- remove leftover trailing newlines -->
        <propertyregexp property="expected" 
            input="${expected}"
            defaultValue="${expected}"
            global="true"
            override="true"
            regexp="[&#9999; \t]+$"
            replace="&#9999;"
            />
      </then>
    </if>

    <!--
        Replace newlines with ^s for easier (?) reading
    -->
    <propertyregexp property="expected" 
        defaultValue="${expected}"
        global="true"
        input="${expected}"
        override="true"
        regexp="&#9999;"
        replace="^"
        />
    <propertyregexp property="actual" 
        defaultValue="${actual}"
        global="true"
        input="${actual}"
        override="true"
        regexp="&#9999;"
        replace="^"
        />

    <condition property="different" value="true">
      <not>
        <equals arg1="${expected}" arg2="${actual}"/>
      </not>
    </condition>

    <fail if="different">
${diff.actual} doesn't match ${diff.expected}:
Actual:
'${actual}'
Expected:
'${expected}'
</fail>

  </target>
  
  <!--
        Compare two files generated by Dynamator, 
        ignoring all comments in the generated file and
        whitespace in both files.
        Fails the build if the files don't match.

        property params:
        - diff.expected: The location of the expected file
        - diff.actual:   The location of the actual file
  -->
  <target name="diff-uncommented">
    <antcall target="diff">
      <param name="diff.expected" value="${diff.expected}"/>
      <param name="diff.actual" value="${diff.actual}"/>
      <param name="diff.ignore-whitespace" value="true"/>
      <param name="diff.uncommented" value="true"/>
    </antcall>
  </target>
  
  <!--
        Compare two files.

        Property parameters:
        - compare.test-output:      The directory containing the tests.
                                    Has subdirectories expected and
                                    actual.
        - compare.filename:         The simple name of the file to be
                                    compared; exists in both expected
                                    and actual.
  -->
  <target name="compare">
    <antcall target="diff">
      <param name="diff.expected"
          location="${compare.test-output}/expected/${compare.filename}"/>
      <param name="diff.actual"
          location="${compare.test-output}/actual/${compare.filename}"/>
    </antcall>
  </target>
  
  <property name="CHECK_WHITESPACE" value=""/>
  <property name="IGNORE_WHITESPACE" value="-ignore-whitespace"/>
  
  <!--
        Compare two files.
        
        Property parameters:
        - filename                  The location of the actual file.
                                    The text "actual" is replaced with
                                    "expected" to find the expected file.
        - diff.ignore-whitespace    ${IGNORE_WHITESPACE} to ignore
                                    whitespace for the comparision,
                                    ${CHECK_WHITESPACE} if whitespace
                                    is significant.
  -->
  <target name="diff-each">
    <propertyregexp property="diff-each.expected"
        input="${filename}"
        regexp="actual(_uncommented)?"
        replace="expected"
        />
    
    <antcall target="diff">
      <param name="diff.actual"
          location="${filename}"/>
      <param name="diff.expected"
          location="${diff-each.expected}"/> 
    </antcall>
  </target>
  
  <!--
        Compare two directories of files.
        
        Property parameters:
        - diff-dir.actual           The directory containing the actual
                                    files.
                                    Expected files are assumed to be
                                    in a corresponding directory, with
                                    "actual" in the directory path 
                                    changed to "expected".
        - diff.ignore-whitespace    ${CHECK_WHITESPACE} if whitespace
                                    is significant (default);
                                    ${IGNORE_WHITESPACE} to ignore
                                    whitespace for the comparision
        - diff.uncommented          'true' to strip comments and
                                    indents from the expected file
                                    before comparing
  -->
  <target name="diff-dir">
    <property name="diff.ignore-whitespace" value=""/>
    <property name="diff.uncommented" value="false"/>

    <echo message="Checking ${diff-dir.actual}"/>

    <!-- derive the expected directory -->
    <propertyregexp property="diff-dir.expected"
        input="${diff-dir.actual}"
        regexp="actual(_uncommented)?"
        replace="expected"
        />
    
    <!-- Compare each file -->
    <foreach
        target="diff-each"
        param="filename"
        >
      <path>
        <fileset dir="${diff-dir.actual}"
            includes="*"
            excludes="CVS"
            />
      </path>
      <param name="diff.ignore-whitespace"
          value="${diff.ignore-whitespace}"/>
      <param name="diff.uncommented"
          value="${diff.uncommented}"/>
    </foreach>

    <!-- Compare the set of files -->
    <pathconvert pathsep="," property="diff-dir.actual-files">
      <path>
        <fileset dir="${diff-dir.actual}" id="diff-dir.actual-dir"/>
      </path>
    </pathconvert>
    
    <pathconvert pathsep="," property="diff-dir.expected-files">
      <path>
        <fileset dir="${diff-dir.expected}" id="diff-dir.expected-dir"/>
      </path>
    </pathconvert>

    <propertyregexp property="diff-dir.actual-files"
        input="${diff-dir.actual-files}"
        global="true"
        override="true"
        regexp="[^,]+(/|\\)"
        replace=""
        />
    
    <propertyregexp property="diff-dir.expected-files"
        input="${diff-dir.expected-files}"
        global="true"
        override="true"
        regexp="[^,]+(/|\\)"
        replace=""
        />
    
    <condition property="different" value="true">
      <not>
        <equals arg1="${diff-dir.expected-files}" arg2="${diff-dir.actual-files}"/>
      </not>
    </condition>

    <fail if="different">
Directories don't match: 
${diff-dir.actual}:   ${diff-dir.actual-files}
${diff-dir.expected}: ${diff-dir.expected-files}
</fail>

  </target>
    
  <!--
      ============================================================
      Externally executable targets
      ============================================================
  -->

  <target name="init"
      description="Initialize test/actual directory"
      >
    <delete quiet="true">
      <fileset dir="${dir.test-output}/actual" includes="*"/>
    </delete>

    <mkdir  dir="${dir.test-output}/actual"/>
  </target>
  
  <target name="filenotfound"
      depends="init"
      unless="com.ms.windir"
      description="Test input file not found condition"
      >
    <mkdir dir="${dir.test-output}/expected"/>
    <echo file="${dir.test-output}/expected/filenotfound.out"
>Dynamator: File not found: ${basedir}${file.separator}filenotfound.html
</echo>
    <java classname="dynamate" 
        classpathref="classpath.project"
        fork="true"
        output="${dir.test-output}/actual/filenotfound.out">
      <arg value="filenotfound.html"/>
    </java>    
    <antcall target="compare">
      <param name="compare.filename" value="filenotfound.out"/>
      <param name="compare.test-output" value="${dir.test-output}"/>
    </antcall>
  </target>
  
  <target name="dynnotfound"
      depends="init"
      unless="com.ms.windir"
      description="Test Dynamator file not found condition"
      >
    <mkdir dir="${dir.test-output}/expected"/>
    <echo file="${dir.test-output}/expected/dynnotfound.out"
>Dynamator: Dynamator file not found: ${basedir}${file.separator}empty.dyn
</echo>
    <replace file="${dir.test-output}/expected/dynnotfound.out"
        token="\"
        value="/"
        />
    <java classname="dynamate" fork="true"
        classpathref="classpath.project"
        output="${dir.test-output}/actual/dynnotfound.out">
      <arg value="languages/dynamator/none/test/regression/empty.html"/>
    </java>    
    <replace file="${dir.test-output}/actual/dynnotfound.out"
        token="\"
        value="/"
        />
    <antcall target="compare">
      <param name="compare.filename" value="dynnotfound.out"/>
      <param name="compare.test-output" value="${dir.test-output}"/>
    </antcall>
  </target>
  
  <target name="usage"
      depends="init"
      unless="com.ms.windir"
      description="Test usage message"
      >
    <mkdir dir="${dir.test-output}/expected"/>
    <echo file="${dir.test-output}/expected/usage.out"
>Usage: java dynamate [options] file ...
Options: 

  [-a]       -- always convert HTML to XML
  [-B]       -- only output the content of the HTML body
  [-C]       -- remove all comments from template
  [-d dir]   -- place output in [dir]
  [-e enc]   -- use Java encoding 'enc'
  [-f dir]   -- obtain Dynamator files from [dir]
  [-F file]  -- apply Dynamator [file] to following templates
  [-G]       -- don't output generation comment
  [-H]       -- treat following files as HTML
  [-I dir]*  -- look in [dir] for includes
                (default and last resort is .dyn dir)
  [-N]       -- don't indent output
  [-t dir]   -- look for templates in dir
  [-T{file}] -- trace execution to {file} or STDERR
  [-v]       -- display dynamator version
  [-V]       -- don't validate Dynamator files
  [-X]       -- treat following files as XML
</echo>
    <property name="filename" value="usage.out"/>
    <java classname="dynamate"
        classpathref="classpath.project"
        output="${dir.test-output}/actual/usage.out">
    </java>    
    <antcall target="compare">
      <param name="compare.filename" value="usage.out"/>
      <param name="compare.test-output" value="${dir.test-output}"/>
    </antcall>
  </target>
  
  <!-- 
    Only do the version test if a compile has been performed
    in this environment.  Otherwise the version comparison file
    won't exist.
  -->
  <target name="check-version.out">
    <available property="version.out.exists"
        file="${dir.test-output}/expected/version.out"
      />
  </target>
  
  <target name="direct"
      depends="init"
      description="Test dynamation of a specific file."
      >
    <delete file="${dir.test-output}/actual/empty.html"/>
    <dynamate
        srcdir="languages/dynamator/none/test/regression"
        destdir="${dir.test-output}/actual"
        destsuffix="html"
        includes="empty.html"
      />

    <antcall target="diff">
      <param name="diff.expected"
          location="${basedir}/languages/dynamator/none/test/regression/expected/empty.html"/>
      <param name="diff.actual"
          location="${dir.test-output}/actual/empty.html"/>
    </antcall>
  </target>    

  <target name="version"
      depends="init, check-version.out"
      if="version.out.exists"
      unless="com.ms.windir"
      description="Test version message"
    >
    <java classname="dynamate"
        classpathref="classpath.project"
        output="${dir.test-output}/actual/version.out">
      <arg value="-v"/>
    </java>    
    <antcall target="compare">
      <param name="compare.filename" value="version.out"/>
      <param name="compare.test-output" value="${dir.test-output}"/>
    </antcall>
  </target>
  
  <target name="regression_invalid"
      unless="com.ms.windir"
      description="Execute regression tests for error cases">

    <property name="invalid.dir.src"
        value="languages/dynamator/none/test/regression"/>
    <property name="invalid.dir.out"
        value="${invalid.dir.src}/invalid"/>

    <mkdir dir="${invalid.dir.out}"/>
    <delete dir="${invalid.dir.out}" includeEmptyDirs="true"/>
    <mkdir dir="${invalid.dir.out}"/>
    
    <mkdir dir="test"/>
    <java classname="org.apache.tools.ant.Main"
        fork="true"
        output="${dir.test-output}/invalid.out"
        classpath="${classpath.project}"
        >
      <arg value="-Ddir.src=${invalid.dir.src}"/>
      <arg value="-Ddir.out=${invalid.dir.out}"/>
      <arg value="-f"/>
      <arg value="test-invalid.xml"/>
    </java>

    <delete includeEmptyDirs="true">
      <fileset dir="${invalid.dir.out}">
        <exclude name="*.html"/>
        <exclude name="*.xml"/>
      </fileset>
    </delete>

    <available property="invalid.succeeded"
        file="${invalid.dir.out}"/>
        
    <antcall target="check_invalid"/>

  </target>

  <target name="check_invalid"
      if="invalid.succeeded">

    <fail message="One or more invalid files were successfully processed."/>
  </target>

  <target name="regression_syntax"
      unless="com.ms.windir"
      description="Execute regression tests for Dynamator syntax error cases">

    <property name="syntax.dir.src"
        value="languages/dynamator/none/test/regression"/>
    <property name="syntax.dir.out"
        value="${syntax.dir.src}/invalid"/>

    <mkdir dir="${syntax.dir.out}"/>
    <delete dir="${syntax.dir.out}" includeEmptyDirs="true"/>
    <mkdir dir="${syntax.dir.out}"/>
    
    <mkdir dir="test"/>
    <java classname="org.apache.tools.ant.Main"
        fork="true"
        output="${dir.test-output}/syntax.out"
        classpath="${classpath.project}"
        >
      <arg value="-Ddir.src=${syntax.dir.src}"/>
      <arg value="-Ddir.out=${syntax.dir.out}"/>
      <arg value="-f"/>
      <arg value="test-syntax.xml"/>
    </java>

    <delete includeEmptyDirs="true">
      <fileset dir="${syntax.dir.out}">
        <exclude name="*.html"/>
        <exclude name="*.xml"/>
      </fileset>
    </delete>

    <property name="syntax.actual.src" 
        location="${dir.test-output}/syntax.out"/>
    <property name="syntax.expected.src" 
        location="${syntax.dir.src}/DynamatorSyntax.expected"/>
    
    <loadfile property="syntax.actual"
        srcFile="${syntax.actual.src}"/>
    <loadfile property="syntax.expected"
        srcFile="${syntax.expected.src}"/>

    <!-- remove directory paths -->
    <propertyregexp property="syntax.actual"
        input="${syntax.actual}"
        defaultValue="${syntax.actual}"
        global="true"
        override="true"
        regexp="[^ \n\r]*[\\/]([^\\/]+) "
        replace="\1 "
        />
    
    <propertyregexp property="syntax.expected"
        input="${syntax.expected}"
        defaultValue="${syntax.expected}"
        global="true"
        override="true"
        regexp="[^ \n\r]*[\\/]([^\\/]+) "
        replace="\1 "
        />
        
    <!-- remove time -->
    <propertyregexp property="syntax.actual"
        input="${syntax.actual}"
        defaultValue="${syntax.actual}"
        global="true"
        override="true"
        regexp="Total time.*"
        replace=""
        />
    
    <propertyregexp property="syntax.expected"
        input="${syntax.expected}"
        defaultValue="${syntax.expected}"
        global="true"
        override="true"
        regexp="Total time.*"
        replace=""
        />
    
    <!-- remove summary message -->
    <propertyregexp property="syntax.actual"
        input="${syntax.actual}"
        defaultValue="${syntax.actual}"
        global="true"
        override="true"
        regexp=".* files not processed"
        replace=""
        />
    
    <propertyregexp property="syntax.expected"
        input="${syntax.expected}"
        defaultValue="${syntax.expected}"
        global="true"
        override="true"
        regexp=".* files not processed"
        replace=""
        />
    
    <!-- normalize newlines -->
    <propertyregexp property="syntax.actual" 
        input="${syntax.actual}"
        defaultValue="${syntax.actual}"
        global="true"
        override="true"
        regexp="(\r\n|\n\r|\n|\r)"
        replace="&#10;"
        />
    
    <propertyregexp property="syntax.expected" 
        input="${syntax.expected}"
        defaultValue="${syntax.expected}"
        global="true"
        override="true"
        regexp="(\r\n|\n\r|\n|\r)"
        replace="&#10;"
        />
    
    <condition property="different" value="true">
      <not>
        <equals arg1="${syntax.expected}" arg2="${syntax.actual}"/>
      </not>
    </condition>

    <fail if="different">
${syntax.actual.src} doesn't match ${syntax.expected.src}:
Actual:
'${syntax.actual}'
Expected:
'${syntax.expected}'
</fail>

  </target>

  <target name="regression_none"
      description="Execute regression tests for language=none">

    <property name="dir.test.none" 
        location="${basedir}/languages/dynamator/none/test/regression"/>
    
    <antcall target="regression_none_">
      <param name="test.input.dir"
          value="${dir.test.none}"/>
      <param name="test.output.dir"
          value="${dir.test.none}/actual"/>
      <param name="dyn.gencomment" value="true"/>
      <param name="dyn.stripcomments" value="false"/>
      <param name="dyn.indent" value="true"/>
    </antcall>

    <!-- 
        Test using stripcomments, noindent, and no gen comment.
        Whitespace is ignored for this test because the sed 
        script removes whitespace in the .dyn file, which 
        Dynamator does not remove.
    -->
    
    <antcall target="regression_none_">
      <param name="test.input.dir"
          value="${dir.test.none}"/>
      <param name="test.output.dir"
          value="${dir.test.none}/actual_uncommented"/>
      <param name="diff.check.whitespace" value="${IGNORE_WHITESPACE}"/>
      <param name="dyn.gencomment" value="false"/>
      <param name="dyn.stripcomments" value="true"/>
      <param name="dyn.indent" value="false"/>
    </antcall>

  </target>    

  <target name="regression_none_">

    <mkdir dir="${test.output.dir}"/>
    <delete>
      <fileset dir="${test.output.dir}"
          includes="*"
        />
    </delete>

<!--
    <delete>
      <fileset dir="${test.input.dir}"
          includes="*.asxml"
        />
    </delete>
-->

    <!-- language=none -->
    <dynamate
        srcdir="${test.input.dir}"
        destdir="${test.output.dir}"
        destsuffix="xml"
        includes="*.xml"
        trace="${trace}"
        stripComments="${dyn.stripcomments}"
        indent="${dyn.indent}"
        gencomment="${dyn.gencomment}"
      />
    <dynamate
        srcdir="${test.input.dir}"
        destdir="${test.output.dir}"
        destsuffix="html"
        includes="*.html"
        includeds="*.include"
        excludes="
            **/expected/*,
            **/big5*,
            **/utf8*,
            **/unknownencoding*,
            **/Include.html
            **/Invalid*
            **/DynamatorSyntax*
            "
        trace="${trace}"
        stripComments="${dyn.stripcomments}"
        indent="${dyn.indent}"
        gencomment="${dyn.gencomment}"
      />
    <dynamate
        srcdir="${test.input.dir}"
        destdir="${test.output.dir}"
        destsuffix="html"
        includes="static.dyn"
        trace="${trace}"
        stripComments="${dyn.stripcomments}"
        indent="${dyn.indent}"
        gencomment="${dyn.gencomment}"
      />
    <dynamate
        srcdir="${test.input.dir}"
        destdir="${test.output.dir}"
        destsuffix="html"
        includes="Include.html"
        includepath="languages/dynamator/none/test"
        trace="${trace}"
        stripComments="${dyn.stripcomments}"
        indent="${dyn.indent}"
        gencomment="${dyn.gencomment}"
      />
    <dynamate
        srcdir="${test.input.dir}"
        destdir="${test.output.dir}"
        destsuffix="frag"
        includes="*.frag"
        bodyonlyhtml="true"
        trace="${trace}"
        stripComments="${dyn.stripcomments}"
        indent="${dyn.indent}"
        gencomment="${dyn.gencomment}"
      />

    <antcall target="diff-dir">
      <param name="diff-dir.actual" 
          value="${test.output.dir}"/>
      <param name="diff.uncommented"
          value="${dyn.stripcomments}"/>
    </antcall>

  </target>

  <target name="regression_encoding"
      description="Execute regression tests for character encodings">

    <antcall target="regression_encoding_">
      <param name="test.input.dir"
          value="languages/dynamator/none/test/regression"/>
      <param name="test.output.dir"
          value="languages/dynamator/none/test/regression/actual_encoding"/>
      <param name="dyn.gencomment" value="true"/>
      <param name="dyn.stripcomments" value="false"/>
      <param name="dyn.indent" value="true"/>
    </antcall>

  </target>    

  <target name="regression_encoding_"
      unless="com.ms.windir"
      >

    <mkdir dir="${test.output.dir}"/>
    <delete>
      <fileset dir="${test.output.dir}"
          includes="*"
        />
    </delete>

<!--
    <delete>
      <fileset dir="${test.input.dir}"
          includes="*.asxml"
        />
    </delete>
-->

    <dynamate
        srcdir="${test.input.dir}"
        destdir="${test.output.dir}"
        destsuffix="html"
        encoding="big5"
        includes="big5*.html"
        trace="${trace}"
        stripComments="${dyn.stripcomments}"
        indent="${dyn.indent}"
        gencomment="${dyn.gencomment}"
      />
    <dynamate
        srcdir="${test.input.dir}"
        destdir="${test.output.dir}"
        destsuffix="html"
        encoding="utf-8"
        includes="utf8*.html"
        trace="${trace}"
        stripComments="${dyn.stripcomments}"
        indent="${dyn.indent}"
        gencomment="${dyn.gencomment}"
      />
    <dynamate
        srcdir="${test.input.dir}"
        destdir="${test.output.dir}"
        destsuffix="html"
        encoding="windows-1252"
        includes="unknownencoding*.html"
        ignoreasxml="true"
        trace="${trace}"
        stripComments="${dyn.stripcomments}"
        indent="${dyn.indent}"
        gencomment="${dyn.gencomment}"
      />

    <antcall target="diff-dir">
      <param name="diff-dir.actual" 
          value="${test.output.dir}"/>
      <param name="diff.uncommented"
          value="${dyn.stripcomments}"/>
    </antcall>

  </target>

  <target name="regression_jsp"
      description="Execute regression tests for language=jsp">

    <property name="dir.test.jsp" 
        location="${basedir}/languages/dynamator/jsp/test"/>
    
    <antcall target="regression_jsp_">
      <param name="test.input.dir"
          value="${dir.test.jsp}/basic"/>
      <param name="test.output.dir"
          value="${dir.test.jsp}/basic/actual"/>
      <param name="dyn.gencomment" value="true"/>
      <param name="dyn.stripcomments" value="false"/>
      <param name="dyn.indent" value="true"/>
    </antcall>

    <antcall target="regression_jsp_">
      <param name="test.input.dir"
          value="${dir.test.jsp}/regression"/>
      <param name="test.output.dir"
          value="${dir.test.jsp}/regression/actual"/>
      <param name="dyn.gencomment" value="true"/>
      <param name="dyn.stripcomments" value="false"/>
      <param name="dyn.indent" value="true"/>
    </antcall>

<!--
        The uncommented tests fail because all whitespace in prolog is  
        copied, and all prologs start with a newline.  The sed script
        results in no newline at start of file.
        
        The sed script also removes the comment div.
    
    <antcall target="regression_jsp_">
      <param name="test.input.dir"
          value="${dir.test.jsp}/basic"/>
      <param name="test.output.dir"
          value="${dir.test.jsp}/basic/actual_uncommented"/>
      <param name="dyn.gencomment" value="false"/>
      <param name="dyn.stripcomments" value="true"/>
      <param name="dyn.indent" value="false"/>
    </antcall>

    <antcall target="regression_jsp_">
      <param name="test.input.dir"
          value="${dir.test.jsp}/regression"/>
      <param name="test.output.dir"
          value="${dir.test.jsp}/regression/actual_uncommented"/>
      <param name="dyn.gencomment" value="false"/>
      <param name="dyn.stripcomments" value="true"/>
      <param name="dyn.indent" value="false"/>
    </antcall>
-->

  </target>    

  <target name="regression_jsp_">
    
    <mkdir dir="${test.output.dir}"/>
    <delete>
      <fileset dir="${test.output.dir}"
          includes="*"
        />
    </delete>

<!--
    <delete>
      <fileset dir="${test.input.dir}"
          includes="*.asxml"
        />
    </delete>
-->

    <dynamate
        srcdir="${test.input.dir}"
        destdir="${test.output.dir}"
        destsuffix="jsp"
        includes="*.xml, *.html"
        trace="${trace}"
        stripComments="${dyn.stripcomments}"
        indent="${dyn.indent}"
        gencomment="${dyn.gencomment}"
      />

    <antcall target="diff-dir">
      <param name="diff-dir.actual" 
          value="${test.output.dir}"/>
      <param name="diff.uncommented"
          value="${dyn.stripcomments}"/>
    </antcall>

  </target>

  <target name="regression_java"
      description="Execute regression tests for language=java">

    <property name="dir.test.java" 
        location="${basedir}/languages/dynamator/java/test/regression"/>
    
    <mkdir dir="${dir.test.java}/actual"/>
    <delete>
      <fileset dir="${dir.test.java}/actual"
          includes="*.*"
        />
    </delete>

    <delete>
      <fileset dir="${dir.test.java}"
          includes="*.asxml"
        />
    </delete>

    <dynamate
        srcdir="${dir.test.java}"
        matchdir="${dir.test.java}"
        destdir="*/actual"
        destsuffix="java"
        includes="*.xml, *.html"
        trace="${trace}"
      />

    <antcall target="diff-dir">
      <param name="diff-dir.actual" 
          value="${dir.test.java}/actual"/>
      <param name="diff.uncommented"
          value="${dyn.stripcomments}"/>
    </antcall>

    <antcall target="compile-java"/>
  
  </target>

  <target name="check-jsdk-available">
    <available property="jsdk.available"
        classname="javax.servlet.Servlet"
        classpathref="classpath.project"
        />
  </target>
  
  <target name="check-jdk1.2-available">
    <available property="jdk1.2.available"
        classname="java.util.Iterator"
        />
  </target>
  
  <target name="check-ok-to-compile"
      depends="check-jsdk-available,check-jdk1.2-available">
    <condition property="ok-to-compile">
      <and>
        <istrue value="${jsdk.available}"/>
        <istrue value="${jdk1.2.available}"/>
      </and>
    </condition>
  </target>
  
  <target name="compile-java"
      depends="check-jsdk-available"
      unless="com.ms.windir"
      if="ok-to-compile">
      
    <javac
        srcdir="${dir.test.java}/actual"
        destdir="${dir.test.java}/actual"
        excludes="${compile-java.excludes}"
        >
      <classpath refid="classpath.project"/>
    </javac>

  </target>
  
  <target name="regression_xsl"
      description="Execute regression tests for language=xsl">
    
    <property name="dir.test.xsl" 
        location="${basedir}/languages/dynamator/xsl/test/regression"/>
    
    <mkdir dir="${dir.test.xsl}/actual"/>
    <delete>
      <fileset dir="${dir.test.xsl}/actual"
          includes="*.*"
        />
    </delete>

    <delete>
      <fileset dir="${dir.test.xsl}"
          includes="*.asxml"
        />
    </delete>

    <dynamate
        srcdir="${dir.test.xsl}"
        matchdir="${dir.test.xsl}"
        destdir="*/actual"
        destsuffix="xsl"
        includes="*.html"
        trace="${trace}"
      />

    <antcall target="diff-dir">
      <param name="diff-dir.actual" 
          value="${dir.test.xsl}/actual"/>
      <param name="diff.uncommented"
          value="${dyn.stripcomments}"/>
    </antcall>

  </target>

  <target name="regression_xsl-text"
      description="Execute regression tests for language=xsl-text">
    
    <property name="dir.test.xsl-text" 
        location="${basedir}/languages/dynamator/xsl/text/test/regression"/>
    
    <mkdir dir="${dir.test.xsl-text}/actual"/>
    <delete>
      <fileset dir="${dir.test.xsl-text}/actual"
          includes="*.*"
        />
    </delete>

    <dynamate
        srcdir="${dir.test.xsl-text}"
        matchdir="${dir.test.xsl-text}"
        destdir="*/actual"
        destsuffix="xsl"
        includes="*.template"
        trace="${trace}"
      />

    <antcall target="diff-dir">
      <param name="diff-dir.actual" 
          value="${dir.test.xsl-text}/actual"/>
      <param name="diff.uncommented"
          value="${dyn.stripcomments}"/>
    </antcall>

  </target>

  <target name="regression_asp"
      description="Execute regression tests for language=asp">
    
    <property name="dir.test.asp" 
        location="${basedir}/languages/dynamator/asp/vb/test/regression"/>
    
    <mkdir dir="${dir.test.asp}/actual"/>
    <delete>
      <fileset dir="${dir.test.asp}/actual"
          includes="*.*"
        />
    </delete>

    <delete>
      <fileset dir="${dir.test.asp}"
          includes="*.asxml"
        />
    </delete>

    <dynamate
        srcdir="${dir.test.asp}"
        matchdir="${dir.test.asp}"
        destdir="*/actual"
        destsuffix="asp"
        includes="*.html"
        trace="${trace}"
      />

    <antcall target="diff-dir">
      <param name="diff-dir.actual" 
          value="${dir.test.asp}/actual"/>
      <param name="diff.uncommented"
          value="${dyn.stripcomments}"/>
    </antcall>

  </target>

  <target name="regression_php"
      description="Execute regression tests for language=php">
    
    <property name="dir.test.php" 
        location="${basedir}/languages/dynamator/php/test/regression"/>
    
    <mkdir dir="${dir.test.php}/actual"/>
    <delete>
      <fileset dir="${dir.test.php}/actual"
          includes="*.*"
        />
    </delete>

    <delete>
      <fileset dir="${dir.test.php}"
          includes="*.asxml"
        />
    </delete>

    <dynamate
        srcdir="${dir.test.php}"
        matchdir="${dir.test.php}"
        destdir="*/actual"
        destsuffix="php"
        includes="*.html"
        trace="${trace}"
      />

    <antcall target="diff-dir">
      <param name="diff-dir.actual" 
          value="${dir.test.php}/actual"/>
      <param name="diff.uncommented"
          value="${dyn.stripcomments}"/>
    </antcall>

  </target>
  
  <target name="regression" 
      depends="
        init,
        filenotfound,
        dynnotfound,
        usage,
        direct,
        version,
        regression_invalid,
        regression_syntax,
        regression_none,
        regression_encoding,
        regression_jsp,
        regression_java,
        regression_xsl,
        regression_xsl-text,
        regression_asp,
        regression_php
        "
      description="Execute all regression tests."
      />
    
  <target name="regression_parallel" 
      depends="
        init,
        filenotfound,
        dynnotfound,
        usage,
        direct,
        version
        "
        >
    <parallel>
      <antcall target="regression_invalid"/>
      <antcall target="regression_syntax"/>
      <antcall target="regression_none"/>
      <antcall target="regression_encoding"/>
      <antcall target="regression_jsp"/>
      <antcall target="regression_java"/>
      <antcall target="regression_xsl"/>
      <antcall target="regression_xsl-text"/>
      <antcall target="regression_asp"/>
      <antcall target="regression_php"/>
    </parallel>
  </target>

  <target name="clean">
    <delete dir="${dir.test-output}/actual"/>
    <delete>
      <fileset dir="languages">
        <include name="**/actual/**"/>
        <include name="**/actual_uncommented/**"/>
        <include name="**/expected_uncommented/**"/>
      </fileset>
    </delete>
  </target>

</project>
