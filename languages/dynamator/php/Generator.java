/***********************************************************************
*   Copyright 2002-2003 by Jay Dunning.
*   All rights reserved.
*
*   Redistribution and use in source and binary forms, with or without
*   modification, are permitted provided that the following conditions 
*   are met:
*
*   1.  Redistributions of source code must retain the above copyright
*       notice, this list of conditions, and the following disclaimer.
*
*   2.  Redistributions in binary form must reproduce the above
*       copyright notice, this list of conditions, and the following
*       disclaimer in the documentation and/or other materials provided
*       with the distribution.
*
*   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
*   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
*   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*   DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR ANY CONTRIBUTORS
*   BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
*   OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*   OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
*   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
*   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
*   SUCH DAMAGE.
***********************************************************************/

package dynamator.php;

import java.util.Date;

public
class Generator
extends dynamator.Generator
{
//    private static final String rcsID_ = 
//        "$Id: Generator.java,v 1.6 2004/04/06 12:26:17 jaydunning Exp $";

    public
    void
    outputDynamicValueExpression(
        String value
        )
    {
        outputRaw(
            ( value.startsWith("<") )
            ? value
            : dynamicExpression(value));
    }
    
    private
    String
    dynamicExpression(
        String value
        )
    {
        return "<?php echo (" + value + ") ?>";
    }

    private String scriptletIndent_ = "";

    private
    void
    startScriptlet(
        boolean newLine
        )
    {
        inTemplateLine(false);
        scriptletIndent_ = indentation_.current();
        outputRaw("<?php ");
        indentation_.increase();
        endProgramLine();
        startProgramLine();
    }
    
    private
    void
    endScriptlet(
        boolean newLine
        )
    {
        indentation_.decrease();
        if ( formatting() )
        {
            outputRaw("\n");
            outputRaw(scriptletIndent_);
        }
        outputRaw("?>");
        inTemplateLine(true);
    }
    
    public
    void
    start(
        boolean produceGenerationComment
        )
    {
        if ( produceGenerationComment )
        {
            outputRaw("<?php /* generated by Dynamator " + new Date() 
                + " */\n?>");
        }
    }
    
    public
    Object          // if-expression
    startIfBlock(
        String expression,
        boolean newLine
        )
    {
        expression = expression.trim();     // just in case
        startScriptlet(false);
        outputRaw("if ( " + expression + ")");
        nextProgramLine();
        outputRaw("{");
        indentation_.increase();
        if ( ! newLine )
        {
            scriptletIndent_ += indentation_.string();
            scriptletIndent_ += indentation_.string();
        }
        endScriptlet(newLine);
        indentation_.increase();

        return expression;
    }
    
    public
    void
    endIfBlock(
        Object ifExpression,
        boolean newLine
        )
    {
        indentation_.decrease();
        indentation_.decrease();
        startScriptlet(newLine);
        outputRaw("}");
//        outputRaw("} /* " + ifExpression.toString() + " */");
        endScriptlet(newLine);
    }
    
    public
    Object
    startCollectionIterationBlock(
        String collectionExpression,
        String collectionTypeString, 
        String elementName,
        String iName,
        String collectionName
        )
    {
        // foreach ( collection-expression )
        // ignore all args except the collection expression
        collectionExpression = collectionExpression.trim();

        startScriptlet(true);
        outputRaw("foreach ( " + collectionExpression + ")");
        nextProgramLine();
        outputRaw("{");
        indentation_.increase();
        endScriptlet(true);
        indentation_.increase();
        return collectionExpression;
    }
    
    public
    void
    endCollectionIterationBlock(
        Object foreachExpression
        )
    {
        indentation_.decrease();
        indentation_.decrease();
        indentation_.decrease();
        startScriptlet(true);
        outputRaw(indentation_.string());
        outputRaw("}");
//        outputRaw("}  /* foreach " + foreachExpression.toString() + " */");
        endScriptlet(true);
    }

    public
    Object
    startSequencedIterationBlock(
        String i,       // ignored
        String first,
        String last, 
        String step
        )
    {
        Object result = null;

        /*
            output a php scriptlet to begin an iteration block.
        */

        startScriptlet(true);
        
        outputRaw(
            "for ( " + first + "; " + last + "; " + step + " )"
            );
        
        nextProgramLine();
        outputRaw("{");
        indentation_.increase();

        endScriptlet(true);
        indentation_.increase();

        return result;
    }
    
    public
    void
    endSequencedIterationBlock(
        Object nothing
        )
    {
        indentation_.decrease();
        indentation_.decrease();
        startScriptlet(true);
        outputRaw("}  // for");
        endScriptlet(true);
    }

    public
    Object
    startForBlock(
        String expression
        )
    {
        /*
            output a php scriptlet to begin a for block.
        */

        startScriptlet(true);
        
        outputRaw("for ");
        if ( ! expression.startsWith("(") )
        {
            outputRaw("( ");
        }
        outputRaw(expression);
        if ( ! expression.startsWith(")") )
        {
            outputRaw(" )");
        }
        
        nextProgramLine();
        outputRaw("{");
        indentation_.increase();

        endScriptlet(true);
        indentation_.increase();

        return null;
    }
    
    public
    void
    endForBlock(
        Object nothing
        )
    {
        indentation_.decrease();
        indentation_.decrease();
        startScriptlet(true);
        outputRaw("}  // for");
        endScriptlet(true);
    }
}
